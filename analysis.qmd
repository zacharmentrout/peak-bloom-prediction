---
title: "Peak Bloom Prediction"
format:
  html:
    self-contained: true
editor: visual
---

```{r}

c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")

c_light_teal <- c("#6B8E8E")
c_mid_teal <- c("#487575")
c_dark_teal <- c("#1D4F4F")

nom_colors <- c("#DCBCBC", "#C79999", "#B97C7C", "#A25050", "#8F2727", "#7C0000")
```

## Prepare Model Data

```{r}

renv::restore()

util <- new.env()
source('functions.R', local=util)


base_list <- util$prep_base_data()
d_init <- base_list$d_init
locations_init <- base_list$locations_init

# pull daily observed temperatures
util$pull_daily_temperature_data(locations_init, out_file = 'data/daily_temperature.csv', max_date = '2025-02-26', min_date='2025-02-14', write_to_file = F)

# pull daily temperature forecasts (openmeteo climate forecasts)
util$pull_forecasted_temperature_data(locations_init, out_file = 'data/daily_forecasted_temperature.csv', min_date = NA, max_date = '2025-06-01', write_to_file = F)

# load daily observed temperatures
# daily_temp_init <- read.csv('data/daily_temperature.csv')
daily_temp_init <- read.csv(unz('data/temperature_data_zip_files/daily_temperature.csv.zip', "daily_temperature.csv"))
daily_temp_init <- na.omit(daily_temp_init)
daily_temp_init$id<- paste(daily_temp_init$date, daily_temp_init$location, sep = "_")  # Create a composite key
daily_temp <- daily_temp_init[order(daily_temp_init$id, daily_temp_init$timestamp_run, decreasing = TRUE), ]
daily_temp <- daily_temp[!duplicated(daily_temp$id), ]

# load daily temperature forecasts
# daily_forecast_temp_init <- read.csv('data/daily_forecasted_temperature.csv')
daily_forecast_temp_init <- read.csv(unz('data/temperature_data_zip_files/daily_forecasted_temperature.csv.zip', "daily_forecasted_temperature.csv"))
daily_forecast_temp_init <- daily_forecast_temp_init[daily_forecast_temp_init$date >= '2010-01-01',]

# de-duplicate (take latest pulled temp per location/date)
daily_forecast_temp_init$id<- paste(daily_forecast_temp_init$date, daily_forecast_temp_init$location, daily_forecast_temp_init$model, sep = "_") 
daily_forecast_temp <- daily_forecast_temp_init[order(daily_forecast_temp_init$id, daily_forecast_temp_init$timestamp_run, decreasing = TRUE), ]
daily_forecast_temp <- daily_forecast_temp[!duplicated(daily_forecast_temp$id), ]

# compute daily mean and sd of forecasted temperature (across full forecast ensemble)
daily_forecast_temp_means <- aggregate(daily_temperature_2m_mean ~ date+location, data = daily_forecast_temp_init, function(x) c(mean = mean(x), sd = sd(x)))

# prepare modeling data
mod_data <- util$prep_mod_data(pheno_data_init = d_init, temp_data_init = daily_temp,  forecast_temp_data_init = daily_forecast_temp_means, plot_temp = F, plot_forecast_temp = F)
```

## Set Prior Hyperparameters

```{r}
# chill day temp threshold
mean_Z_chill <- 3
sd_Z_chill <- 4 / 2.32 

# forcing temp threshold
mean_Z_forcing <- 6 
sd_Z_forcing <- 4 / 2.32 

# intercept for phenology 
mean_alpha <- 35
sd_alpha <- 7.45 / 2.32

# center of covariate neighborhood 
x0_chill_days <- 38

# linear coefficient
mean_beta1 <- -0.5
sd_beta1 <- 0.21 / 2.32

# quadratic coefficient
mean_beta2 <- 0
sd_beta2 <- 0.006 / 2.32

# standard deviation of bloom events
sd_sigma <- 3

# temperature forecast modeling - bias term
mean_delta <- 0
sd_delta <- 10 / 2.32 

# temperature forecast modeling - base uncertainty (independent of forecast ensemble sd)
sd_tau <- 7 / 2.32 



# add these hyperpriors to the model data list

mod_data$mean_alpha <- mean_alpha
mod_data$sd_alpha<- sd_alpha
mod_data$mean_beta1 <- mean_beta1
mod_data$sd_beta1 <- sd_beta1
mod_data$mean_beta2 <- mean_beta2
mod_data$sd_beta2 <- sd_beta2
mod_data$sd_sigma<- sd_sigma

mod_data$mean_Z_chill <- mean_Z_chill
mod_data$sd_Z_chill <- sd_Z_chill
mod_data$mean_Z_forcing <- mean_Z_forcing
mod_data$sd_Z_forcing <-sd_Z_forcing
mod_data$x0_chill_days <- x0_chill_days

mod_data$mean_delta <- mean_delta
mod_data$sd_delta <- sd_delta
mod_data$sd_tau <- sd_tau


# sample function for initial values for all parameters
simu_inits <- function(chain_id) {
  out <- list("alpha" = rnorm(1, mean_alpha, sd_alpha), 
              "beta1" = rnorm(1, mean_beta1, sd_beta1), 
              "beta2" = rnorm(1, mean_beta2, sd_beta2), 
              "Z_chill" = rnorm(1, mean_Z_chill, sd_Z_chill),
              "Z_forcing" = rnorm(1, mean_Z_forcing, sd_Z_forcing),
              "sigma" = abs(rnorm(1, 0, sd_sigma)),
              "delta" = rnorm(1, mean_delta, sd_delta),
              "tau" = abs(rnorm(1, 0, sd_tau))
              )
  #print(paste0('Chain ', chain_id, '...'))
  #print(out)
  return(out)
}

```

## Model

```{r}

# fit model
mod_surv_fit <- stan(file=file.path("stan_programs/pheno_chill_nonlinear_with_forecasts.stan"),
                     data=mod_data, init=simu_inits, seed=8438339,
                     warmup=1000, iter=2000, control = list(adapt_delta = 0.8))

# extract samples
mod_surv_samples <- util$extract_expectand_vals(mod_surv_fit)

# HMC and parameter expectand diagnostics
diagnostics <- util$extract_hmc_diagnostics(mod_surv_fit)
util$check_all_hmc_diagnostics(diagnostics)
names <- c('alpha', 'beta1', 'beta2', 'sigma','Z_forcing', 'Z_chill', 'delta', 'tau')
base_samples <- util$filter_expectands(mod_surv_samples, names)
util$check_all_expectand_diagnostics(base_samples)


```

## Get Predictions and Write to File

```{r}


pred_events_forecast_names <- paste0('pred_events_forecast[', 1:nrow(mod_data$sites_and_years_predict_df), ']')
pred_events_forecast <- sapply(pred_events_forecast_names, function(name) mod_surv_samples[[name]]) 
expected_pred_events_forecast <- round(colMeans(pred_events_forecast))
expected_pred_events_date <- as.Date('2024-10-01') + expected_pred_events_forecast - 1
expected_pred_events_forecast_change_base <- util$day_num_of_year(expected_pred_events_date)
predictions <- data.frame(location=mod_data$sites_and_years_predict_df$location, prediction=expected_pred_events_forecast_change_base, predicted_bloom_date=expected_pred_events_date)

write.csv(predictions, "cherry-predictions.csv", row.names = F)
```

## Prior Predictive and Posterior Retrodictive Checks

Note: Bloom event days were recomputed such that day 1 corresponds to Oct 1 of the previous year.

```{r}

# sample from prior
mod_surv_fit_prior <- stan(file=file.path("stan_programs/pheno_chill_nonlinear_with_forecasts_prior.stan"), 
                           data=mod_data, seed=8438339, algorithm="Fixed_param",
                           iter=1000, chains=1, warmup=0,init=simu_inits, refresh=0
)

# extract prior samples
mod_surv_samples_prior <- util$extract_expectand_vals(mod_surv_fit_prior)


util$plot_hist_quantiles(samples = mod_surv_samples_prior, val_name_prefix = "pred_events",bin_delta = 5, baseline_values = mod_data$pheno_data_prior_df$doy, xlab = "Bloom Event (Prior)", bin_min=120, bin_max=280)


util$plot_hist_quantiles(samples = mod_surv_samples, val_name_prefix = "pred_events",bin_delta = 5, baseline_values = mod_data$events, xlab = "Bloom Event (Posterior)", bin_min=120, bin_max=280)

```

## Heat Requirement (HR) Posterior vs. Centered Chill Days

```{r}
# sequence of relevant centered chill day totals
x_minus_x0 <- seq(0,80) - mod_data$x0_chill_days
# compute each HR (psi0) using posterior distributions of intercept, linear, and quadratic parameters
psi0 <- matrix(rep(extract(mod_surv_fit,'alpha')[[1]], length(x_minus_x0)), nrow =length(extract(mod_surv_fit,'alpha')[[1]]), ncol = length(x_minus_x0)) +
  matrix(extract(mod_surv_fit,'beta1')[[1]])%*%x_minus_x0 +
  matrix(extract(mod_surv_fit,'beta2')[[1]])%*%(x_minus_x0^2)

# add to sample list
for (k in 1:length(x_minus_x0)) {
  mod_surv_samples[[paste0('psi0[',k,']')]] <- matrix(psi0[,k], nrow=4, ncol=1000)
}

# plot condition mean quantiles
psi0_names <- grep('psi0', names(mod_surv_samples), value=TRUE)[1:length(x_minus_x0)]
util$plot_conditional_mean_quantiles(mod_surv_samples, psi0_names,x_minus_x0, xlab = "Chill Days (Centered)", main = "Heat Requirement")
```

## Posterior vs. Prior Distributions

```{r}

# Chill function threshold
util$plot_expectand_pushforward(mod_surv_samples[["Z_chill"]], 25,
                                display_name="Z_chill", flim=c(-3, 10))
xs <- seq(-3, 10, 0.01)
ys <- dnorm(xs,mod_data$mean_Z_chill , mod_data$sd_Z_chill)
lines(xs, ys, lwd=2, col=c_light_teal)

# Forcing function threshold
util$plot_expectand_pushforward(mod_surv_samples[["Z_forcing"]], 25,
                                display_name="Z_forcing", flim=c(-3, 10))
xs <- seq(-3, 10, 0.01)
ys <- dnorm(xs, mod_data$mean_Z_forcing , mod_data$sd_Z_forcing)
lines(xs, ys, lwd=2, col=c_light_teal)

# HR parameters
util$plot_expectand_pushforward(mod_surv_samples[["alpha"]], 25,
                                display_name="HR Intercept", flim=c(10, 50))
xs <- seq(10, 50, 0.01)
ys <- dnorm(xs, mean_alpha, sd_alpha)
lines(xs, ys, lwd=2, col=c_light_teal)

util$plot_expectand_pushforward(mod_surv_samples[["beta1"]], 25,
                                display_name="HR Linear", flim=c(-2, 1))
xs <- seq(-2, 1, 0.01)
ys <- dnorm(xs, mean_beta1, sd_beta1)
lines(xs, ys, lwd=2, col=c_light_teal)

util$plot_expectand_pushforward(mod_surv_samples[["beta2"]], 25,
                                display_name="HR Quadratic", flim=c(-0.01, 0.02))
xs <- seq(-0.03, 0.03, 0.0001)
ys <- dnorm(xs, mean_beta2, sd_beta2)
lines(xs, ys, lwd=2, col=c_light_teal)

# Event timing variability
util$plot_expectand_pushforward(mod_surv_samples[["sigma"]], 25,
                                display_name="sigma", flim=c(0, 15))
xs <- seq(0, 15, 0.1)
ys <- dnorm(xs, 0, sd_sigma)
lines(xs, ys, lwd=2, col=c_light_teal)


# Temperature bias parameter
par(mfrow=c(1,1))
util$plot_expectand_pushforward(mod_surv_samples[["delta"]], 25,
                                display_name="delta", flim=c(-10, 10))
xs <- seq(-10, 10, 0.001)
ys <- dnorm(xs, mean_delta, sd_delta)
lines(xs, ys, lwd=2, col=c_light_teal)

# Temperature baseline uncertainty parameter
util$plot_expectand_pushforward(mod_surv_samples[["tau"]], 25,
                                display_name="tau", flim=c(0, 10))
xs <- seq(0, 10, 0.001)
ys <- dnorm(xs, 0, sd_tau)
lines(xs, ys, lwd=2, col=c_light_teal)

```

## Computing Environment

```{r}
sessionInfo()

```
